# Trigger the pipeline on changes to the main branch and specific paths.
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'MyLogicApp/**'
      - 'Tests/**'
      - 'deployments/MyLogicAppDeployment/pipelines/CI-Pipeline.yml'

# Use the Ubuntu agent image.
pool:
  vmImage: 'ubuntu-latest'

# Define variables for build configuration and solution file location.
variables:
  buildConfiguration: 'Debug'
  solution: 'Tests/Tests.sln'
  # Pattern for TRX test results generated by dotnet test.
  testResultsFiles: '**/TestResults/*.trx'

steps:
# 1. Add the local NuGet source from the Tests folder.
- script: |
    dotnet nuget add source "$(Build.SourcesDirectory)/Tests" --name local
  displayName: 'Add Local NuGet Source'

# 2. Manually add the local packages to your project.
- script: |
    dotnet add Tests/MyLogicApp/MyLogicApp.csproj package Microsoft.Azure.Workflows.WebJobs.Extension --version "1.114.0.40" --source "Tests"
    dotnet add Tests/MyLogicApp/MyLogicApp.csproj package Microsoft.Azure.Workflows.WebJobs.Tests.Extension --version "1.0.0-preview" --source "Tests"
  displayName: 'Manually add local packages'

# 3. List NuGet sources to verify the local source was added.
- script: |
    dotnet nuget list source
  displayName: 'List NuGet Sources'

# 4. Restore external packages (using agent's default nuget.config which includes nuget.org)
- task: DotNetCoreCLI@2
  displayName: 'Restore External NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    arguments: '--ignore-failed-sources'
  continueOnError: true

# 5. Restore local packages by adding the local feed explicitly via the command line.
- task: DotNetCoreCLI@2
  displayName: 'Restore Local NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    arguments: '--source "Tests"'
  continueOnError: true

# 6. Build the solution in Debug configuration.
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

# 7. Run unit tests using dotnet test.
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --logger "trx;LogFileName=test_results.trx" --collect:"XPlat Code Coverage"'

# 8. Publish test results so they appear in the Azure DevOps Test Results tab.
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(testResultsFiles)'
    mergeTestResults: true
    testRunTitle: 'Unit Test Results'
  condition: always()
