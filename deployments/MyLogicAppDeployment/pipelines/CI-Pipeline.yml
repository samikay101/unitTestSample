# Trigger the pipeline on commits to the main branch and changes in relevant folders.
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'MyLogicApp/**'
      - 'Tests/**'
      - 'deployments/MyLogicAppDeployment/pipelines/CI-Pipeline.yml'

# Use a Microsoft-hosted agent with Windows (for VSTest compatibility)
pool:
  vmImage: 'windows-latest'

# Define variables for build configuration and solution file location.
variables:
  buildConfiguration: 'Debug'
  # The solution file that includes all test projects.
  solution: 'Tests/Tests.sln'
  # Pattern for TRX test results files generated by VSTest.
  testResultsFiles: '**/TestResults/*.trx'

steps:
# 1. Restore NuGet packages for the solution.
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
  # Troubleshooting: Check the logs to ensure all packages are restored correctly.

# 2. Build the solution in Debug configuration.
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'
  # Troubleshooting: Build logs can be used to identify any compilation issues.

# 3. Run unit tests using VSTest@3.
- task: VSTest@3
  displayName: 'Run unit tests'
  inputs:
    testSelector: 'testAssemblies'
    # Use a pattern to find all test assemblies.
    testAssemblyVer2: |
      **\$(buildConfiguration)\*test*.dll
      !**\obj\**
    # Specify the root folder to search for test assemblies.
    searchFolder: '$(System.DefaultWorkingDirectory)'
    # Enable diagnostic logs for detailed troubleshooting.
    diagnosticsEnabled: true
    # Enable code coverage collection.
    codeCoverageEnabled: true
  # continueOnError is set to false so that the pipeline stops on test failures.
  continueOnError: false
  # Troubleshooting:
  # - If tests do not run, verify that the pattern matches your built test DLLs.
  # - The diagnostics logs will provide detailed error information if test execution fails.

# 4. Publish test results so they appear in the Azure DevOps Test Results tab.
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '$(testResultsFiles)'
    mergeTestResults: true
    testRunTitle: 'Unit Test Results'
    failTaskOnFailedTests: true
  # Troubleshooting:
  # - This step aggregates and publishes your TRX files.
  # - If no results appear, check that the VSTest task is generating TRX files in the expected location.
