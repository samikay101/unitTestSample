# ──────────────────────────────────────────────────────────────────────────────
# CI-Pipeline.yml – Run .NET 6 tests on Ubuntu and publish results
# ──────────────────────────────────────────────────────────────────────────────
trigger:
  branches:
    include: [ main ]                 # Trigger on pushes to main (adjust as needed)

pool:
  vmImage: ubuntu-latest              # Uses Ubuntu 22.04 hosted agent

variables:
  buildConfiguration: 'Release'       # One place to change if you want Debug
  dotnetVersion: '6.0.x'              # Installs latest 6.x SDK

steps:
# 1. Install the SDK that matches your code
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'
  displayName: 'Install .NET $(dotnetVersion) SDK'

# 2. Restore dependencies (deterministic --locked-mode optional but recommended)
- script: |
    dotnet restore Tests/Tests.sln --locked-mode
  displayName: 'dotnet restore'

# 3. Build the test solution (no restore again)
- script: |
    dotnet build Tests/Tests.sln \
      --configuration $(buildConfiguration) \
      --no-restore \
      -p:ContinuousIntegrationBuild=true
  displayName: 'dotnet build ($(buildConfiguration))'

# 4. Run all tests; write TRX files to a predictable folder
- script: |
    RESULTS_DIR=$(Agent.TempDirectory)/test-results
    mkdir -p "$RESULTS_DIR"
    dotnet test Tests/Tests.sln \
      --configuration $(buildConfiguration) \
      --no-build \
      --logger "trx;LogFileName=test-results.trx" \
      --results-directory "$RESULTS_DIR"
  displayName: 'dotnet test (generate TRX)'

# 5. Publish TRX results so they appear in the Azure DevOps “Tests” tab
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Agent.TempDirectory)/test-results/*.trx'
    failTaskOnFailedTests: true       # Mark pipeline red if any test fails
  displayName: 'Publish Test Results'
