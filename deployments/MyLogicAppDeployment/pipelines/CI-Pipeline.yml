# Trigger the pipeline on changes to the main branch and specific paths.
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'MyLogicApp/**'
      - 'Tests/**'
      - 'deployments/MyLogicAppDeployment/pipelines/CI-Pipeline.yml'

# Use the Ubuntu agent image.
pool:
  vmImage: 'ubuntu-latest'

# Define variables for build configuration, solution location, and feed URLs.
variables:
  buildConfiguration: 'Debug'
  solution: 'Tests/Tests.sln'
  azureArtifactsFeed: 'https://pkgs.dev.azure.com/logicappsiactesting/logicappsiactest/_packaging/AutomatedTesting/nuget/v3/index.json'

steps:
# 1. Install the NuGet tool.
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Tool'

# 2. Authenticate to Azure Artifacts.
- task: NuGetAuthenticate@0
  displayName: 'Authenticate to Azure Artifacts'

# 3. Restore internal packages using the Azure Artifacts feed.
- task: DotNetCoreCLI@2
  displayName: 'Restore Internal Packages from Azure Artifacts'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    # arguments: '--source "$(azureArtifactsFeed)"'
  continueOnError: true

# 4. Restore public packages by explicitly specifying the public NuGet feed.
- task: DotNetCoreCLI@2
  displayName: 'Restore Public Packages from nuget.org'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    arguments: '--source "https://api.nuget.org/v3/index.json"'
  continueOnError: true

# 5. Build the solution in Debug configuration.
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

# 6. Run unit tests using VSTest.
- task: VSTest@2
  displayName: 'Run unit tests using VSTest'
  inputs:
    testSelector: 'testAssemblies'
    # Adjust the pattern below if your test assembly name or output location is different.
    testAssemblyVer2: '**/bin/$(buildConfiguration)/**/MyLogicApp.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    diagnosticsEnabled: true
    codeCoverageEnabled: true


# 7. Publish test results so they appear in the Azure DevOps Test Results tab.
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(testResultsFiles)'
    mergeTestResults: true
    testRunTitle: 'Unit Test Results'
  condition: always()
