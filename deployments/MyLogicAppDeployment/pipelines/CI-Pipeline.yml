# Trigger the pipeline on changes to the main branch and specific paths.
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'MyLogicApp/**'
      - 'Tests/**'
      - 'deployments/MyLogicAppDeployment/pipelines/CI-Pipeline.yml'

# Use the Ubuntu agent image.
pool:
  vmImage: 'ubuntu-latest'

# Define variables for build configuration and solution file location.
variables:
  buildConfiguration: 'Debug'
  solution: 'Tests/Tests.sln'
  # Pattern for TRX test results generated by dotnet test.
  testResultsFiles: '**/TestResults/*.trx'

steps:
# 1. Install NuGet tool (ensures the correct version is available)
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Tool'

# 2. Authenticate to Azure Artifacts so the feed can be accessed.
- task: NuGetAuthenticate@0
  displayName: 'Authenticate to Azure Artifacts'

# 3. Restore NuGet packages using the NuGet.config file that includes both the Azure Artifacts feed and nuget.org.
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    arguments: '--configfile NuGet.config'
  continueOnError: true

# 4. Build the solution in Debug configuration.
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

# 5. Run unit tests using dotnet test.
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --logger "trx;LogFileName=test_results.trx" --collect:"XPlat Code Coverage"'

# 6. Publish test results so they appear in the Azure DevOps Test Results tab.
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(testResultsFiles)'
    mergeTestResults: true
    testRunTitle: 'Unit Test Results'
  condition: always()
