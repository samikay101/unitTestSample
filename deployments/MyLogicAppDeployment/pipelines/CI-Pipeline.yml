trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

# ────────────────────────────────────
# Variables
# ────────────────────────────────────
variables:
- name: buildConfiguration
  value: 'Release'

- name: dotnetVersion
  value: '6.0.x'

# Variable-group that holds ARM_CONNECTION_KEY and ARM_CONNECTION_RUNTIME_URL
- group: logicapp-unit-test-secrets

# ────────────────────────────────────
# Stages
# ────────────────────────────────────
stages:
- stage: Build_Test
  jobs:
  - job: BuildTest
    pool:
      vmImage: ubuntu-latest

    steps:
    # Install the requested .NET SDK
    - task: UseDotNet@2
      inputs:
        packageType: sdk
        version: $(dotnetVersion)

    # Restore and build
    - script: dotnet restore Tests/Tests.sln --locked-mode
      displayName: dotnet restore

    - script: dotnet build Tests/Tests.sln --configuration $(buildConfiguration) --no-restore --property:ContinuousIntegrationBuild=true
      displayName: dotnet build

    # Create local.settings.json in the test output directory
    # Path: Tests/MyLogicApp/bin/Release/net6.0
    - task: Bash@3
      displayName: Create local.settings.json in test output folder
      env:
        ARM_CONNECTION_KEY:         $(ARM_CONNECTION_KEY)
        ARM_CONNECTION_RUNTIME_URL: $(ARM_CONNECTION_RUNTIME_URL)
      inputs:
        targetType: inline
        workingDirectory: '$(Build.SourcesDirectory)/Tests/MyLogicApp/bin/$(buildConfiguration)/net6.0'
        script: |
          echo "Working directory: $(pwd)"
          cat > local.settings.json <<EOF
          {
            "IsEncrypted": false,
            "Values": {
              "AzureWebJobsStorage": "UseDevelopmentStorage=true",
              "FUNCTIONS_WORKER_RUNTIME": "node",
              "APP_KIND": "workflowapp",
              "ProjectDirectoryPath": "c:\\\\Users\\\\samikarakra\\\\Desktop\\\\CICDTemplate\\\\WS-1\\\\MyLogicApp",
              "WORKFLOWS_TENANT_ID": "72f988bf-86f1-41af-91ab-2d7cd011db47",
              "WORKFLOWS_SUBSCRIPTION_ID": "80d4fe69-c95b-4dd2-a938-9250f1c8ab03",
              "WORKFLOWS_RESOURCE_GROUP_NAME": "SamiEastUS2EUAP",
              "WORKFLOWS_LOCATION_NAME": "eastus2euap",
              "WORKFLOWS_MANAGEMENT_BASE_URI": "https://management.azure.com/",
              "arm-connectionKey": "${ARM_CONNECTION_KEY}",
              "arm-ConnectionRuntimeUrl": "${ARM_CONNECTION_RUNTIME_URL}"
            }
          }
          EOF

    # Optional: list json/config files copied to output for troubleshooting
    - script: |
        echo "=== Copied runtime assets (json / config) ==="
        find Tests -path "*/bin/$(buildConfiguration)/*" \
             \( -name '*.json' -o -name '*.config' \) -print | sort
      displayName: verify copied files
      condition: always()

    # Run tests and collect coverage
    - script: |
        dotnet test Tests/Tests.sln \
          --configuration $(buildConfiguration) \
          --no-build \
          --logger trx \
          --collect:"XPlat Code Coverage"
      displayName: dotnet test

    # Publish test results
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'
        failTaskOnFailedTests: true

    # Publish code-coverage report
    - task: PublishCodeCoverageResults@2
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)'
